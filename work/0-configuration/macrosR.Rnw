
% working directories
<<wd, echo =FALSE>>=
image.dir <- paste(getwd(), "../../photos/sample0", sep="/")
#image.dir <- paste(working.dir, "photos/ExploratorySubSample", sep="/")
@




<< echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE>>=
library(EBImage)

images <- list.files(image.dir, full.names = T)

loadEqImage <- function( images ){
  ims <- lapply(images, readImage)
  ims <- lapply(ims, function(x) channel(x, mode = 'luminance'))
  eqims <- lapply(ims, function(x) equalize(x, range = 0:1, levels = 2^8))
  return(eqims)
}

clustering0 <- function( simgobj ){
  data <- imageData( simgobj )
  v <- do.call(c, lapply(1:nrow(data), function(x) data[x,]))
  newdata <- matrix(kmeans(v, 3)$cluster, byrow=T, nrow=nrow(data))
  newimg <- as.Image(newdata)
}

clustering1 <- function( imgobj ){
  threshold <- sapply(imgobj, otsu)
  ims_th <- mapply(function(frame, th) frame > th,
                    imgobj, threshold, SIMPLIFY = FALSE)
  imst <- lapply(ims_th, fillHull)
  imst <- lapply(imst, function(x) max(x) - x )
  return(lapply(imst, bwlabel))
}

getDistances <- function( clusterim ){
  mapply(function(x) as.Image(distmap(x)/max(distmap(x))), lapply(clusterim, imageData), SIMPLIFY = FALSE)
}

segmentation <- function( scmask, simgobj , sdist){
  mask <- watershed( sdist , tolerance = 3*mean(imageData(sdist)))
  simgseg <- propagate(seeds = mask, x=simgobj, mask = scmask)
  return(simgseg)
}

getData <- function( imgseg ){
  data <- do.call(rbind, mapply(function(x,z){
    x <- imageData(x)
    v <-  c(matrix(x, nrow=1, byrow = T))
    groups <- unique(v)
    counts <- sapply(groups, function(y) sum(v==y))
    image <- rep(z, length(counts))
    return(cbind(image, groups, counts))
  }, imgseg, 1:length(imgseg)))
  return(data)
}
@


